package org.kexing.management.infrastruction.consumer;import com.yunmo.domain.common.Events;import com.yunmo.iot.api.core.DeviceService;import com.yunmo.iot.domain.core.Device;import com.yunmo.iot.pipe.core.DeviceConnectionEvent;import com.yunmo.iot.pipe.core.DeviceConnectionEventMarshaller;import lombok.extern.slf4j.Slf4j;import org.apache.pulsar.client.api.*;import org.kexing.management.domin.model.mysql.DeviceSource;import org.kexing.management.domin.model.mysql.WorkOrder;import org.kexing.management.domin.service.WorkOrderService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.event.ContextRefreshedEvent;import org.springframework.context.event.EventListener;import org.springframework.stereotype.Component;import java.io.ByteArrayInputStream;import java.time.Instant;import java.util.HashMap;import java.util.Map;import java.util.Objects;import java.util.stream.IntStream;@Component@Slf4jpublic class DeviceConnectionEventPulsarConsumer {    @Autowired    private PulsarClient client;    ConsumerBuilder<byte[]> consumerBuilder;    @Autowired    WorkOrderService workOrderService;    @Autowired    DeviceService deviceService;    private DeviceConnectionEventMarshaller marshaller = new DeviceConnectionEventMarshaller();    @EventListener    public void run(ContextRefreshedEvent event) {        log.debug("DeviceConnectionEventPulsarConsumer+++++++++");        this.consumerBuilder = this.client.newConsumer()                .topic("iot/pipe/connection")                .subscriptionName("kexing-iot-connection")                .deadLetterPolicy(DeadLetterPolicy.builder()                .maxRedeliverCount(3)                .build())                .subscriptionType(SubscriptionType.Shared);        IntStream.range(0,4).forEach(i->{            try {                this.consumerBuilder.consumerName(String.format("kexing-iot-connection-consumer-%d", i))                        .messageListener(this::process)                        .subscribe();            } catch (PulsarClientException e) {                log.error("在线状态订阅失败:{}", e.getMessage());            }        });    }    private void process(Consumer<byte[]> consumer, Message<byte[]> msg) {        try {            DeviceConnectionEvent oneOfEvent = marshaller.parse(new ByteArrayInputStream(msg.getData()));            if(!Objects.isNull(oneOfEvent.getOfflineEvent())) {                Device device = deviceService.getDeviceById(oneOfEvent.getOfflineEvent().getDeviceId());                String location = device.getAttributes().get("location").toString();                Map<String,Object> attributes = new HashMap<>();                attributes.put("event_type","offline");                attributes.put("alert_time", Instant.now().getEpochSecond());                String problemDescription = "设备类型："                        .concat(WorkOrder.SourceType.describe(WorkOrder.SourceType.valueOf(device.getAttributes().get("deviceType").toString())))                        .concat("设备ID：").concat(device.getId().toString()).concat("离线");                workOrderService.createWorkOrder1(device.getId(),location,problemDescription,WorkOrder.Type.DEVICE_MAINTAIN,null, DeviceSource.IOT);            }            consumer.acknowledge(msg);        } catch (Exception e) {            log.warn("连接消息处理异常：",e);            consumer.negativeAcknowledge(msg);        }    }}